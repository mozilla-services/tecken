version: 2
jobs:
  checkout_code:
    docker:
      - image: ubuntu:16.04
    working_directory: ~/tecken
    steps:
      - run:
          name: Install essential packages
          command: |
            apt-get update && apt-get install -y ca-certificates git
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/tecken

  build_test_and_deploy:
    docker:
      - image: ubuntu:16.04
    working_directory: ~/tecken
    steps:
      - run:
          name: Install essential packages
          command: |
            apt-get update && apt-get install -y ca-certificates curl make

      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}

      - run:
          name: Install Docker
          command: |
            set -x
            VER="17.09.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.16.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

      - setup_remote_docker:
          version: 17.09.0-ce

      - run:
          name: Create version.json
          working_directory: ~/tecken
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build Docker images
          working_directory: ~/tecken
          command: |
            docker info
            cp .env-dist .env
            # build tecken containers
            make build

      - run:
          name: Run tests
          working_directory: ~/tecken
          command: |
            cp .env-dist .env
            make test

      - run:
          name: Push to Dockerhub
          working_directory: ~/tecken
          command: |
            # set DOCKER_DEPLOY=true in Circle UI to push to Dockerhub
            DOCKER_DEPLOY="${DOCKER_DEPLOY:-false}"
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              bin/ci/deploy-dockerhub.sh latest
            fi
            if [ -n "${CIRCLE_TAG}" ]; then
              bin/ci/deploy-dockerhub.sh "$CIRCLE_TAG"
            fi

  run_lintcheck:
    docker:
      - image: ubuntu:16.04
    working_directory: ~/tecken
    steps:
      - run:
          name: Install essential packages
          command: |
            apt-get update && apt-get install -y ca-certificates curl

      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}

      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.16.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

      - setup_remote_docker

      - run:
          name: Linting check for frontend
          working_directory: ~/tecken
          command: |
            touch .env
            docker-compose run frontend-ci lint

workflows:
  version: 2

  # workflow jobs are _not_ run in tag builds by default
  # we use filters to whitelist jobs that should be run for tags

  # workflow jobs are run in _all_ branch builds by default
  # we use filters to blacklist jobs that shouldn't be run for a branch

  # see: https://circleci.com/docs/2.0/workflows/#git-tag-job-execution

  build-test-deploy:
    jobs:
      - checkout_code:
          filters:
            tags:
              only: /.*/
      - build_test_and_deploy:
          requires:
            - checkout_code
          filters:
            tags:
              only: /.*/
      - run_lintcheck:
          requires:
            - checkout_code
