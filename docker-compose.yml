version: '2'

services:
  db:
    image: postgres:9.6@sha256:9d8deca17591f6fef6b2c338fee1a5d7c96da99f18bd51149440099239085800
  redis-store:
    build: ./docker/images/redis
  redis-cache:
    image: redis:3.2@sha256:7d5d76e35b23a6907cf5877fd348ffea7212bb8bce56b2510e58d216462b98e2

  # ------------------------------------------------------------------
  # After this point is dev-related services.
  # ------------------------------------------------------------------

  # Base container is used for development tasks like tests, linting, coverage
  # and building docs.
  base:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - FRONTEND_SENTRY_PUBLIC_DSN
        - CI
    # This builds the tecken:build container
    image: tecken:build
    environment:
      - DJANGO_CONFIGURATION
    env_file:
      - .env

  # Web container is a prod-like fully-functioning container.
  web:
    extends:
      service: base
    depends_on:
      - db
      - redis-store
      - redis-cache
    ports:
      - "8000:8000"
    links:
      - db
      - redis-store
      - redis-cache
      - minio
      - statsd
    volumes:
      - $PWD:/app
    command: web-dev

  # Container specifically for running tests.
  test:
    extends:
      service: base
    links:
      - db
      - redis-store
      - redis-cache
    volumes:
      - $PWD:/app
    command: test

  test-ci:
    extends:
      service: base
    links:
      - db
      - redis-store
      - redis-cache

  # Container specifically for running system tests against a remote.
  # Python based but distinct from the 'web' container.
  systemtest:
    build:
      context: .
      dockerfile: tests/systemtest/Dockerfile
    volumes:
      - $PWD:/app
    environment:
      - BASE_URL=http://web:8000
    links:
      - web
      # - worker

  # Web container is a prod-like fully-functioning container.
  gunicorn:
    extends:
      service: base
    ports:
      - "8000:8000"
    links:
      - db
      - redis-store
      - redis-cache
    command: web

  statsd:
    # https://hub.docker.com/r/hopsoft/graphite-statsd/
    image: hopsoft/graphite-statsd:latest@sha256:42074ad968921e2b8053f3f0b222a605d8307060be0d7bd53b2e3b4b8b8d8952
    ports:
      - "8080:80"
      - "2003-2004:2003-2004"
      - "2023-2024:2023-2024"
      - "8125:8125/udp"
      - "8126:8126"

  worker:
    extends:
      service: base
    depends_on:
      - base
    links:
      - db
      - redis-cache
    volumes:
      - $PWD:/app
    command: worker-purge

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      - NODE_ENV=development
    ports:
      - "3000:3000"
      - "35729:35729"
    volumes:
      - $PWD/frontend:/app
    command: start

  # Same as 'frontend' but no volumes or command
  frontend-ci:
    build:
      context: .
      dockerfile: frontend/Dockerfile

  minio:
    image: minio/minio:latest@sha256:102f582ec338b531dde41a37bf110a73ecdca1241551f4c8d9304fabd9d937c8
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=miniostorage
    ports:
      - "9000:9000"
    volumes:
      - $PWD/miniodata:/export
    command: server /export
