#!/usr/bin/env bash
set -eo pipefail

# default variables
: "${PORT:=8000}"
: "${SLEEP:=1}"
: "${TRIES:=60}"

usage() {
  # echo "usage: bin/run web|web-dev|worker|scheduler|test"
  echo "usage: bin/run web|web-dev|test"
  exit 1
}

wait_for() {
  tries=0
  echo "Waiting for $1 to listen on $2..."
  while true; do
    [[ $tries -lt $TRIES ]] || return
    (echo > /dev/tcp/$1/$2) >/dev/null 2>&1
    result=
    [[ $? -eq 0 ]] && return
    sleep $SLEEP
    tries=$((tries + 1))
  done
}

[ $# -lt 1 ] && usage

# XXX Look into using "healthchecks" in docker-compose
# http://stackoverflow.com/questions/31746182/docker-compose-wait-for-container-x-before-starting-y/41854997#41854997

# Only wait for backend services in development
# http://stackoverflow.com/a/13864829
[ ! -z ${DEVELOPMENT+check} ] && wait_for db 5432 && wait_for redis-cache 6379 && wait_for redis-store 6379

case $1 in
  web)
    ${CMD_PREFIX_PYTHON:-python} manage.py migrate --noinput
    ${CMD_PREFIX} gunicorn tecken.wsgi:application -b 0.0.0.0:${PORT} --workers 4 --access-logfile -
    ;;
  web-dev)
    python manage.py migrate --noinput
    exec python manage.py runserver 0.0.0.0:${PORT}
    ;;
  # worker)
  #   exec newrelic-admin run-python manage.py rqworker --worker-class=rq_retry.RetryWorker default
  #   ;;
  # scheduler)
  #   exec newrelic-admin run-python manage.py rqscheduler
  #   ;;
  test)
    # python manage.py collectstatic --noinput
    coverage erase
    coverage run -m py.test "${@:2}"
    coverage report -m
    # coverage html --skip-covered
    if [[ ! -z ${CI+check} ]]; then
      # submit coverage
      coverage xml
      env
      bash <(curl -s https://codecov.io/bash) -s /tmp
    fi
    ;;
  bash)
    # The likelyhood of needing pytest-watch when in shell is
    # big enough that it's worth always installing it before going
    # into the shell. This is up for debate as time and main developers
    # make.
    pip install pytest-watch
    exec "$@"
    ;;
  *)
    exec "$@"
    ;;
esac
